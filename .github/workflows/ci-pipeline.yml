name: Code quality pipeline

on:
  push:
    branches:
      - pipeline_practice

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.13'
  #         cache: 'pip'
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pylint black
  #     - name: Run pylint
  #       run: pylint --disable=C0111,C0114,C0115,C0116 $(git ls-files '*.py')
      
  #     - name: Run black
  #       run: black . --check
      
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #     - name: Install markdownlint-cli
  #       run: npm install -g markdownlint-cli
  #     - name: Create markdownlint config
  #       run: |
  #         echo '{
  #           "MD013": false,
  #           "line-length": false
  #         }' > .markdownlint.json
  #     - name: Run markdown lint
  #       run: markdownlint '**/*.md' --ignore node_modules
  #     - name: Check editorconfig
  #     - uses: editorconfig-checker/action-editorconfig-checker@v2
  #     - run: editorconfig-checker

  # unit_test:
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.13'
  #         cache: 'pip'
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #     - name: Run tests
  #       run: |
  #         cd app  # Change to app directory
  #         python -m unittest app_test.py

  # check_secrets:
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Required to scan all commits
  #     - name: Gitleaks scan
  #       uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # check_SAST:
  #   needs: [lint]
  #   name: SonarCloud
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env: 
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         args: >
  #           -Dsonar.projectKey=devops-programme
  #           -Dsonar.organization=bsdemon
  #           -Dsonar.sources=.
  #           -Dsonar.branch.name=pipeline_practice

  # security_scan:
  #   needs: [lint]
  #   name: Snyk Security Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.13'
  #         cache: 'pip'
      
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/python@master
  #       continue-on-error: true    # To prevent build failure on vulnerabilities found
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         command: test
  #         args: --sarif-file-output=snyk.sarif

  #     - name: Upload result to GitHub Code Scanning
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()    # Run this step even if previous step failed
  #       with:
  #         sarif_file: snyk.sarif

  build_and_scan:
    name: Build, Scan and Push Docker Image
    runs-on: ubuntu-latest
    # needs: [check_SAST, security_scan, unit_test, check_secrets]  # Ensure security checks pass before building
    permissions:
      contents: read
      security-events: write  # for uploading sarif results
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/pipeline_practice
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest
      # - run: echo $PWD
      # - run: ls -al
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/docker/Dockerfile  # Specify path to your Dockerfile
          push: false  # Don't push yet
          load: true   # Load the image locally for scanning
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Cache Trivy vulnerability database
      - name: Cache Trivy vulnerability database
        uses: actions/cache@v3
        with:
          path: .trivycache/
          key: ${{ runner.os }}-trivy-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/pipeline_practice:${{ steps.meta.outputs.version }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
          exit-code: '1'
          ignore-unfixed: true

      - name: Show scan results
        if: always()
        run: cat trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: Push Docker image if scan passes
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
 
