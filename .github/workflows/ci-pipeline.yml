name: Code quality pipeline

on:
  push:
    branches:
      - pipeline_practice

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint black
      - name: Run pylint
        run: pylint --disable=C0111,C0114,C0115,C0116 $(git ls-files '*.py')
      
      - name: Run black
        run: black . --check
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli
      - name: Create markdownlint config
        run: |
          echo '{
            "MD013": false,
            "line-length": false
          }' > .markdownlint.json
      - name: Run markdown lint
        run: markdownlint '**/*.md' --ignore node_modules
      - uses: editorconfig-checker/action-editorconfig-checker@v2
      - run: editorconfig-checker

  unit_test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          cd app  # Change to app directory
          python -m unittest app_test.py

  check_secrets:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to scan all commits
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check_SAST:
    needs: [check_secrets, unit_test]
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=devops-programme
            -Dsonar.organization=bsdemon
            -Dsonar.sources=.
            -Dsonar.branch.name=pipeline_practice

  security_scan:
    needs: [lint]
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true    # To prevent build failure on vulnerabilities found
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()    # Run this step even if previous step failed
        with:
          sarif_file: snyk.sarif
